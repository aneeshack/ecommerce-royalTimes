<%- include('../layouts/admin/header',{title:"Dashboard"}) %>


    <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
    <!-- <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> -->
    </head>

    <body>
        <div class="container">
            <h1>Admin Dashboard</h1>
            <h2>Orders</h2>


            <div class="mt-3">
                <label for="timeIntervalSelect">Select Interval:</label>
                <select class="form-select" id="timeIntervalSelect">
                    <option value="" selected>Select Interval</option>
                    <option value="day" id="byDayOption">By Day</option>
                    <option value="month" id="byMonthOption">By Month</option>
                    <option value="year" id="byYearOption">By Year</option>
                </select>
            </div>

            <div id="dateInput" class="mt-2" style="display: none;">
                <label for="dateSelect">Date:</label>
                <input type="date" id="dateSelect">
            </div>

            <div id="monthInput" class="mt-2" style="display: none;">
                <label for="monthSelect">Month:</label>
                <input type="month" id="monthSelect">
            </div>

            <div id="yearInput" class="mt-2" style="display: none;">
                <label for="yearSelect">Year:</label>
                <input type="number" id="yearSelect" min="2022" max="2025" step="1">
            </div>

            <!-- <button id="fetchOrdersButton" class="btn btn-primary mt-2">Fetch Orders</button> -->
            <canvas id="orderChart"></canvas>

            <div class="mt-4">
            <!-- <button class="btn btn-danger" onclick="downloadReport('pdf')">Download PDF</button>
            <button class="btn btn-success" onclick="downloadReport('excel')">Download Excel</button> -->
            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#reportModal" onclick="setReportType('pdf')">Download PDF</button>
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#reportModal" onclick="setReportType('excel')">Download Excel</button>
            </div>
        </div>
       

        <!-- Modal for Report Generation -->
<div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reportModalLabel">Generate Sales Report</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="reportIntervalSelect" class="form-label">Select Interval:</label>
                    <select class="form-select" id="reportIntervalSelect">
                        <option value="" selected>Select Interval</option>
                        <option value="day">By Day</option>
                        <option value="week">By Week</option>
                        <option value="month">By Month</option>
                        <option value="year">By Year</option>
                        <option value="custom">By Custom</option>
                    </select>
                </div>

                <div id="reportDateInput" class="mb-3" style="display: none;">
                    <label for="reportDateSelect" class="form-label">Date:</label>
                    <input type="date" id="reportDateSelect" class="form-control">
                </div>

                <div id="reportWeekInput" class="mb-3" style="display: none;">
                    <label for="reportWeekSelect" class="form-label">Select Week:</label>
                    <input type="week" id="reportWeekSelect" class="form-control">
                </div>

                <div id="reportMonthInput" class="mb-3" style="display: none;">
                    <label for="reportMonthSelect" class="form-label">Month:</label>
                    <input type="month" id="reportMonthSelect" class="form-control">
                </div>

                <div id="reportYearInput" class="mb-3" style="display: none;">
                    <label for="reportYearSelect" class="form-label">Year:</label>
                    <input type="number" id="reportYearSelect" class="form-control" min="2022" max="2025" step="1">
                </div>

                <div id="reportCustomDateRange" class="mb-3" style="display: none;">
                    <label for="reportStartDate" class="form-label">Start Date:</label>
                    <input type="date" id="reportStartDate" class="form-control">
                    <label for="reportEndDate" class="form-label mt-2">End Date:</label>
                    <input type="date" id="reportEndDate" class="form-control">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary " id="closeButton" data-bs-dismiss="modal">Close</button>
                <button type="button" id="generateReportButton" class="btn btn-primary">Generate Report</button>
            </div>
        </div>
    </div>
</div>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>

        <!-- <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script> -->

        <script>
            document.addEventListener('DOMContentLoaded', async() => {

                // Initial chart setup (assuming you have initial data for today)
                const rawOrderData = `<%- orderData %>`;

                try {
                    const orderData = JSON.parse(rawOrderData);
                    console.log('Order data is:', orderData);

                    // Now you can safely use orderData for further processing
                    if (!Array.isArray(orderData) || orderData.length === 0) {
                        console.warn('No orders data available for today.');
                        return;
                    }

                    // Example: Displaying order details
                    orderData.forEach(order => {
                        console.log('Order ID:', order._id);
                        console.log('Total Price:', order.totalPrice);
                        
                    });

                    const labels = orderData.map(order => new Date(order.dateOrdered).toLocaleTimeString());
                    const amounts = orderData.map(order => order.totalPrice);

                    const ctx = document.getElementById('orderChart').getContext('2d');
                    const orderChart = new Chart(ctx, {
                        type: 'doughnut', // You can also use 'bar', 'pie', 'doughnut', etc.
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Order Amounts',
                                data: amounts,
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });

                } catch (error) {
                    console.error('Error parsing order data:', error);
                }
            });



            // function to update the chart
            const timeIntervalSelect = document.getElementById('timeIntervalSelect');
            const dateSelect = document.getElementById('dateSelect');
            const monthSelect = document.getElementById('monthSelect');
            const yearSelect = document.getElementById('yearSelect');

            // Show and hide input fields based on selected interval
            timeIntervalSelect.addEventListener('change', (event) => {
                const selectedOption = event.target.value;
                document.getElementById('dateInput').style.display = selectedOption === 'day' ? 'block' : 'none';
                document.getElementById('monthInput').style.display = selectedOption === 'month' ? 'block' : 'none';
                document.getElementById('yearInput').style.display = selectedOption === 'year' ? 'block' : 'none';
            });

            // Event listener for date selection
            dateSelect.addEventListener('change', () => {
                const selectedDate = dateSelect.value;
                if (selectedDate) {
                    fetchOrders(`?date=${selectedDate}`);
                }
            });

            // Event listener for month selection
            monthSelect.addEventListener('change', () => {
                const selectedMonth = monthSelect.value;
                if (selectedMonth) {
                    fetchOrders(`?month=${selectedMonth}`);
                }
            });

            // Event listener for year selection
            yearSelect.addEventListener('change', () => {
                const selectedYear = yearSelect.value;
                if (selectedYear) {
                    fetchOrders(`?year=${selectedYear}`);
                }
            });


            async function fetchOrders(queryString) {
                try {
                    const response = await fetch(`/admin/orders${queryString}`);
                    const data = await response.json();

                    if (response.ok) {
                        console.log('Fetched data:', data);

                        const labels = data.map(order => new Date(order.dateOrdered).toLocaleTimeString());
                    const amounts = data.map(order => order.totalPrice);

                    const ctx = document.getElementById('orderChart').getContext('2d');
                    const orderChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Order Amounts',
                                data: amounts,
                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                borderColor: 'rgba(75, 192, 192, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });

                    orderChart.update();
                    } else {
                        console.log('error in fetching datas:', data)
                    }


                } catch (error) {
                    console.error('Error fetching data:', error);
                }
            }


   // Function to set report type and show/hide date inputs based on interval
   let reportType = '';
    let myModal;

function setReportType(type) {
    
     reportType = type;
     // Use Bootstrap's modal API to show the modal
      myModal = new bootstrap.Modal(document.getElementById('reportModal'), {
        keyboard: false
    });

    myModal.show();
}
document.getElementById('closeButton').addEventListener('click', () => {
    // document.getElementById('reportModal').style.display = 'none';
    if (myModal) {
                myModal.hide();
            }
})
const reportIntervalSelect = document.getElementById('reportIntervalSelect');
const reportDateInput = document.getElementById('reportDateInput');
const reportWeekInput = document.getElementById('reportWeekInput');
const reportMonthInput = document.getElementById('reportMonthInput');
const reportYearInput = document.getElementById('reportYearInput');
const reportCustomDateRange = document.getElementById('reportCustomDateRange');

reportIntervalSelect.addEventListener('change', (event) => {
    const selectedOption = event.target.value;
    reportDateInput.style.display = selectedOption === 'day' ? 'block' : 'none';
    reportWeekInput.style.display = selectedOption === 'week' ? 'block' : 'none';
    reportMonthInput.style.display = selectedOption === 'month' ? 'block' : 'none';
    reportYearInput.style.display = selectedOption === 'year' ? 'block' : 'none';
    reportCustomDateRange.style.display = selectedOption === 'custom' ? 'block' : 'none';
});

document.getElementById('generateReportButton').addEventListener('click', async() => {
    const interval = reportIntervalSelect.value;
    // let queryString = '';
    let queryString = `?reportType=${reportType}`; 

    if (interval === 'day') {
        const date = document.getElementById('reportDateSelect').value;
        queryString += `&interval=day&date=${date}`;
    } else if (interval === 'week') {
        const date = document.getElementById('reportDateSelect').value;
        queryString += `&interval=week&date=${date}`;
    } else if (interval === 'month') {
        const month = document.getElementById('reportMonthSelect').value;
        queryString += `&interval=month&month=${month}`;
    } else if (interval === 'year') {
        const year = document.getElementById('reportYearSelect').value;
        queryString += `&interval=year&year=${year}`;
    } else if (interval === 'custom') {
        const startDate = document.getElementById('reportStartDate').value;
        const endDate = document.getElementById('reportEndDate').value;
        queryString += `&interval=custom&startDate=${startDate}&endDate=${endDate}`;
    }
    
        if (queryString) {
            try {
            const response = await  fetch(`/admin/reports${queryString}`)
            if(response.ok){
                const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `report.${reportType}`;
            document.body.appendChild(a);
            a.click();
            a.remove();

            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'The report has been generated and downloaded successfully.',
                showConfirmButton: false,
                timer: 2000
            });
            }else{
                // throw new Error('Network response was not ok');
                const error = await response.json();
                Swal.fire({
                  icon: 'error',
                  title: 'Error!',
                  text: error.message ||'There was an error generating the report..',
                  showConfirmButton: false,
                  timer: 2000
              });
              
            }
        } catch (error) {
            console.log('Error generating report:', error);
            Swal.fire({
                  icon: 'error',
                  title: 'Error!',
                  text: 'There was an error generating the report. Please try again.',
              });
        }

          }
  });
    
        </script>


        <%- include('../layouts/admin/adminFooter') %>